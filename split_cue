#!/usr/bin/env python
import subprocess
import os
import re
import argparse
from dataclasses import dataclass
from typing import List

@dataclass
class Track:
    number: int
    title: str
    performer: str
    start_time: str
    end_time: str = None

def parse_time(timestamp: str) -> str:
    """Convert CUE time format (MM:SS:FF) to ffmpeg time format (HH:MM:SS.ms)"""
    if not timestamp:
        return None
    mm, ss, ff = map(int, timestamp.split(':'))
    ms = int(ff * 1000 / 75)
    return f"{mm//60:02d}:{mm%60:02d}:{ss:02d}.{ms:03d}"

def parse_cue(cue_content: str) -> tuple[str, List[Track]]:
    """Parse CUE file content and return FLAC filename and track information"""
    lines = cue_content.splitlines()
    flac_file = None
    tracks = []
    current_track = None
    
    for line in lines:
        line = line.strip('\n')
        if line.startswith('FILE '):
            flac_file = line.split('"')[1]
        elif line.startswith('  TRACK '):
            if current_track:
                tracks.append(current_track)
            track_num = int(line.split()[1])
            current_track = Track(number=track_num, title="", performer="", start_time="")
        elif line.startswith('    TITLE '):
            current_track.title = line.split('"')[1]
        elif line.startswith('    PERFORMER '):
            current_track.performer = line.split('"')[1]
        elif line.startswith('    INDEX 01 '):
            current_track.start_time = parse_time(line.split()[-1])
    
    if current_track:
        tracks.append(current_track)
    
    for i in range(len(tracks)-1):
        tracks[i].end_time = tracks[i+1].start_time
    
    return flac_file, tracks

def sanitize_filename(filename: str) -> str:
    """Make filename safe for all platforms"""
    filename = re.sub(r'[<>:"/\\|?*]', '_', filename)
    return filename.strip('. ')

def extract_track(flac_file: str, track: Track, size_threshold: float):
    """Extract a single track from the FLAC file"""
    output_name = f"{track.number:02d}. {sanitize_filename(track.title)}"
    temp_flac = f"{output_name}.flac"

    cmd = ['ffmpeg', '-i', flac_file]
    if track.start_time:
        cmd.extend(['-ss', track.start_time])
    if track.end_time:
        cmd.extend(['-to', track.end_time])
    
    cmd.extend([
        '-metadata', f'title={track.title}',
        '-metadata', f'artist={track.performer}',
        '-metadata', f'track={track.number}',
        '-c:a', 'flac'
    ])
    cmd.append(temp_flac)

    subprocess.run(cmd, check=True)

    # Check file size and convert if necessary
    size_mb = os.path.getsize(temp_flac) / (1024 * 1024)
    if size_mb > size_threshold:
        output_aac = f"{output_name}.m4a"
        cmd = ['ffmpeg', '-i', temp_flac, '-c:a', 'aac', '-b:a', '256k', '-f', 'ipod', output_aac]
        subprocess.run(cmd, check=True)
        os.remove(temp_flac)
        return output_aac
    
    return temp_flac

def process_tracks(flac_file: str, tracks: List[Track], size_threshold: float):
    """Process and extract all tracks"""
    for track in tracks:
        print(f"Processing track {track.number}: {track.title}")
        final_output = extract_track(flac_file, track, size_threshold)
        print(f"Created: {final_output}\n")

def main():
    parser = argparse.ArgumentParser(description='Extract tracks from a CUE file and convert to AAC if size exceeds threshold.')
    parser.add_argument('cue_file', help='Path to the CUE file')
    parser.add_argument('--size-threshold', '-s', type=float, default=float('inf'),
                       help='Size threshold in MB. Files larger than this will be converted to 256k AAC  (default: no conversion)')
    
    args = parser.parse_args()

    with open(args.cue_file, 'r', encoding='utf-8') as f:
        cue_content = f.read()
    
    flac_file, tracks = parse_cue(cue_content)
    process_tracks(flac_file, tracks, size_threshold=args.size_threshold)

if __name__ == '__main__':
    main()